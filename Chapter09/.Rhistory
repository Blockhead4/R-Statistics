}
form <- paste(dvar, "~", tmp)
result <- lm(formula = form, data = data)
return(summary(result))
}
Autolm(Boston, "medv")
re <- lm(formula = tmp, data=Boston)
summary(re)
Autolm(Boston, "medv")
Autolm(Boston, "medv")
quit()
ecit
exit
quit()
Autolm <- function(data, dvar) {
coln <- length(colnames(data) == dvar)
y <- data[, coln]
subsets <- regsubsets(y ~ ., data = data,
method='seqrep', nbest=4)
subsets <- regsubsets(y ~ ., data = data,
method='exhaustive', nbest=4)
case <- summary(subsets)$outmat
rown <- rownames(case)
num1 <- str_sub(rown, 1, 1)
num2 <- str_sub(rown, 6, 6)
choice <- case[rown[num1 == max(num1) & num2 == 1],] == "*"
df_c <- as.data.frame(choice)
df_c <- subset(df_c, df_c$choice == T)
row_df_c <- rownames(df_c); row_df_c
tmp <- paste(dvar, "~")
for (i in 1:length(row_df_c)) {
ifelse(i < length(row_df_c), tmp <- paste(tmp, row_df_c[i], "+"), tmp <- paste(tmp, row_df_c[i]))
}
result <- lm(formula = form, data = data)
return(summary(result))
}
Autolm <- function(data, Y) {
coln <- length(colnames(Boston) == Y)
y < -data[, coln]
subsets <- regsubsets(medv ~ ., data=Boston,
method='seqrep', nbest=4)
subsets <- regsubsets(medv ~ ., data=Boston,
method='exhaustive', nbest=4)
case <- summary(subsets)$outmat;
rown <- rownames(case);
num1 <- str_sub(rown, 1, 1);
num2 <- str_sub(rown, 6, 6);
choice <- case[f[num1 == max(num1) & num2 == 1],] == "*";
df_c <- as.data.frame(choice); df_c
df_c <- subset(df_c, df_c$choice == T)
row_df_c <- rownames(df_c); row_df_c
tmp <- paste(Y, "~")
for (i in 1:length(row_df_c)) {
ifelse(i < length(row_df_c), tmp <- paste(tmp, row_df_c[i], "+", sep=""), tmp <- paste(tmp, row_df_c[i], sep=""))
}
tmp
form <- paste(Y, "~", tmp)
result <- lm(formula = form, data= Boston)
return(summary(result))
}
Autolm <- function(data, dvar) {
coln <- length(colnames(Boston) == dvar)
y < -data[, coln]
subsets <- regsubsets(y ~ ., data = data,
method='seqrep', nbest=4)
subsets <- regsubsets(y ~ ., data = data,
method='exhaustive', nbest=4)
case <- summary(subsets)$outmat
rown <- rownames(case)
num1 <- str_sub(rown, 1, 1)
num2 <- str_sub(rown, 6, 6)
choice <- case[rown[num1 == max(num1) & num2 == 1],] == "*"
df_c <- as.data.frame(choice)
df_c <- subset(df_c, df_c$choice == T)
row_df_c <- rownames(df_c)
form <- paste(dvar, "~")
for (i in 1:length(row_df_c)) {
ifelse(i < length(row_df_c), form <- paste(form, row_df_c[i], "+"), form <- paste(form, row_df_c[i]))
}
result <- lm(formula = form, data = data)
return(summary(result))
}
Autolm(Boston, "medv")
rm(form)
# 4. MASS 패키지를 설치하고, 이 패키지 안에 있는 Boston 데이터셋을 이용하여
# Boston 인근의 집값을 결정하는 다중회귀 모델을 만드시오.
library(MASS)
library(stringr)
library(leaps)
Autolm <- function(data, dvar) {
coln <- length(colnames(Boston) == dvar)
y < -data[, coln]
subsets <- regsubsets(y ~ ., data = data,
method='seqrep', nbest=4)
subsets <- regsubsets(y ~ ., data = data,
method='exhaustive', nbest=4)
case <- summary(subsets)$outmat
rown <- rownames(case)
num1 <- str_sub(rown, 1, 1)
num2 <- str_sub(rown, 6, 6)
choice <- case[rown[num1 == max(num1) & num2 == 1],] == "*"
df_c <- as.data.frame(choice)
df_c <- subset(df_c, df_c$choice == T)
row_df_c <- rownames(df_c)
form <- paste(dvar, "~")
for (i in 1:length(row_df_c)) {
ifelse(i < length(row_df_c), form <- paste(form, row_df_c[i], "+"), form <- paste(form, row_df_c[i]))
}
result <- lm(formula = form, data = data)
return(summary(result))
}
Autolm(Boston, "medv")
Autolm <- function(data, dvar) {
coln <- length(colnames(Boston) == dvar)
y <- data[, coln]
subsets <- regsubsets(y ~ ., data = data,
method='seqrep', nbest=4)
subsets <- regsubsets(y ~ ., data = data,
method='exhaustive', nbest=4)
case <- summary(subsets)$outmat
rown <- rownames(case)
num1 <- str_sub(rown, 1, 1)
num2 <- str_sub(rown, 6, 6)
choice <- case[rown[num1 == max(num1) & num2 == 1],] == "*"
df_c <- as.data.frame(choice)
df_c <- subset(df_c, df_c$choice == T)
row_df_c <- rownames(df_c)
form <- paste(dvar, "~")
for (i in 1:length(row_df_c)) {
ifelse(i < length(row_df_c), form <- paste(form, row_df_c[i], "+"), form <- paste(form, row_df_c[i]))
}
result <- lm(formula = form, data = data)
return(summary(result))
}
Autolm(Boston, "medv")
library(leaps)
library(stringr)
# 4. MASS 패키지를 설치하고, 이 패키지 안에 있는 Boston 데이터셋을 이용하여
# Boston 인근의 집값을 결정하는 다중회귀 모델을 만드시오.
library(MASS)
Autolm <- function(data, dvar) {
coln <- length(colnames(Boston) == dvar)
y <- data[, coln]
subsets <- regsubsets(y ~ ., data = data,
method='seqrep', nbest=4)
subsets <- regsubsets(y ~ ., data = data,
method='exhaustive', nbest=4)
case <- summary(subsets)$outmat
rown <- rownames(case)
num1 <- str_sub(rown, 1, 1)
num2 <- str_sub(rown, 6, 6)
choice <- case[rown[num1 == max(num1) & num2 == 1],] == "*"
df_c <- as.data.frame(choice)
df_c <- subset(df_c, df_c$choice == T)
row_df_c <- rownames(df_c)
form <- paste(dvar, "~")
for (i in 1:length(row_df_c)) {
ifelse(i < length(row_df_c), form <- paste(form, row_df_c[i], "+"), form <- paste(form, row_df_c[i]))
}
result <- lm(formula = form, data = data)
return(summary(result))
}
Autolm(Boston, "medv")
subsets <- regsubsets(medv ~ ., data=Boston,
method='seqrep', nbest=4)
subsets <- regsubsets(medv ~ ., data=Boston,
method='exhaustive', nbest=4)
case <- summary(subsets)$outmat; case
rown <- rownames(case); rown
num1 <- str_sub(rown, 1, 1); num1
num2 <- str_sub(rown, 6, 6); num2
choice <- case[rown[num1 == max(num1) & num2 == 1], ] == "*"; choice
df_c <- as.data.frame(choice); df_c
df_c <- subset(df_c, df_c$choice == T)
row_df_c <- rownames(df_c); row_df_c
tmp <- paste("medv", "~", sep="")
for (i in 1:length(row_df_c)) {
ifelse(i < length(row_df_c), tmp <- paste(tmp, row_df_c[i], "+", sep=""), tmp <- paste(tmp, row_df_c[i], sep=""))
}
tmp
re <- lm(formula = tmp, data=Boston)
summary(re)
Autolm <- function(data, dvar) {
coln <- length(colnames(Boston) == dvar)
y <- data[, coln]
y <- data$dvar
subsets <- regsubsets(y ~ ., data = data,
method='seqrep', nbest=4)
subsets <- regsubsets(y ~ ., data = data,
method='exhaustive', nbest=4)
case <- summary(subsets)$outmat
rown <- rownames(case)
num1 <- str_sub(rown, 1, 1)
num2 <- str_sub(rown, 6, 6)
choice <- case[rown[num1 == max(num1) & num2 == 1],] == "*"
df_c <- as.data.frame(choice)
df_c <- subset(df_c, df_c$choice == T)
row_df_c <- rownames(df_c)
form <- paste(dvar, "~")
for (i in 1:length(row_df_c)) {
ifelse(i < length(row_df_c), form <- paste(form, row_df_c[i], "+"), form <- paste(form, row_df_c[i]))
}
result <- lm(formula = form, data = data)
return(summary(result))
}
Autolm(Boston, "medv")
Autolm <- function(data, dvar) {
coln <- length(colnames(Boston) == dvar)
y <- data[, coln]
subsets <- regsubsets(y ~ ., data = data,
method='seqrep', nbest=4)
subsets <- regsubsets(y ~ ., data = data,
method='exhaustive', nbest=4)
case <- summary(subsets)$outmat
rown <- rownames(case)
num1 <- str_sub(rown, 1, 1)
num2 <- str_sub(rown, 6, 6)
choice <- case[rown[num1 == max(num1) & num2 == 1],] == "*"
df_c <- as.data.frame(choice)
df_c <- subset(df_c, df_c$choice == T)
row_df_c <- rownames(df_c)
form <- paste(dvar, "~")
for (i in 1:length(row_df_c)) {
ifelse(i < length(row_df_c), form <- paste(form, row_df_c[i], "+"), form <- paste(form, row_df_c[i]))
}
result <- lm(formula = form, data = data)
return(summary(result))
}
Autolm(Boston, "medv")
Autolm(Boston, "medv")
subsets <- regsubsets(medv ~ ., data=Boston,
method='seqrep', nbest=4)
Autolm(Boston, "medv")
coln <- length(colnames(Boston) == "medvv")
y <- data[, coln]
y <- Boston[, coln]
y
subsets <- regsubsets(y ~ ., data=Boston,
method='seqrep', nbest=4)
subsets <- regsubsets(y ~ ., data=Boston,
method='exhaustive', nbest=4)
case <- summary(subsets)$outmat; case
rown <- rownames(case); rown
num1 <- str_sub(rown, 1, 1); num1
num2 <- str_sub(rown, 6, 6); num2
choice <- case[rown[num1 == max(num1) & num2 == 1], ] == "*"; choice
df_c <- as.data.frame(choice); df_c
df_c <- subset(df_c, df_c$choice == T)
row_df_c <- rownames(df_c); row_df_c
tmp <- paste("medv", "~", sep="")
subsets <- regsubsets(y ~ ., data=Boston,
method='seqrep', nbest=4)
subsets <- regsubsets(y ~ ., data=Boston,
method='exhaustive', nbest=4)
case <- summary(subsets)$outmat; case
rown <- rownames(case); rown
num1 <- str_sub(rown, 1, 1); num1
num2 <- str_sub(rown, 6, 6); num2
choice <- case[rown[num1 == max(num1) & num2 == 1], ] == "*"; choice
subsets
subsets <- regsubsets(medv ~ ., data=Boston,
method='seqrep', nbest=4)
subsets
Boston$medv
head(Boston$medv)
head(subsets)
head(subsets)
y <- Boston[, coln]
head(Boston$medv)
head(y)
subsets <- regsubsets(medv ~ ., data=Boston,
method='seqrep', nbest=4)
subsets
subsets <- regsubsets(y ~ ., data=Boston,
method='seqrep', nbest=4)
subsets
subsets <- regsubsets(medv ~ ., data=Boston,
method='seqrep', nbest=4)
subsets
subsets <- regsubsets(y ~ ., data=Boston,
method='seqrep', nbest=4)
subsets
head(Boston)
head(Boston[-14])
subsets <- regsubsets(medv ~ ., data=Boston,
method='seqrep', nbest=4)
subsets
subsets <- regsubsets(y ~ ., data=Boston[-coln],
method='seqrep', nbest=4)
subsets
subsets <- regsubsets(y ~ ., data=Boston,
method='exhaustive', nbest=4)
case <- summary(subsets)$outmat; case
rown <- rownames(case); rown
num1 <- str_sub(rown, 1, 1); num1
num2 <- str_sub(rown, 6, 6); num2
choice <- case[rown[num1 == max(num1) & num2 == 1], ] == "*"; choice
df_c <- as.data.frame(choice); df_c
df_c <- subset(df_c, df_c$choice == T)
row_df_c <- rownames(df_c); row_df_c
tmp <- paste("medv", "~", sep="")
for (i in 1:length(row_df_c)) {
ifelse(i < length(row_df_c), tmp <- paste(tmp, row_df_c[i], "+", sep=""), tmp <- paste(tmp, row_df_c[i], sep=""))
}
tmp
head(Boston)
head(Boston[-14])
re <- lm(formula = tmp, data=Boston)
summary(re)
tmp <- paste("medv", "~", sep="")
for (i in 1:length(row_df_c)) {
ifelse(i < length(row_df_c), tmp <- paste(tmp, row_df_c[i], "+", sep=""), tmp <- paste(tmp, row_df_c[i], sep=""))
}
tmp
coln <- length(colnames(Boston) == "medvv")
y <- Boston[, coln]
head(Boston$medv)
head(y)
subsets <- regsubsets(medv ~ ., data=Boston,
method='seqrep', nbest=4)
subsets
subsets <- regsubsets(y ~ ., data=Boston[-coln],
method='seqrep', nbest=4)
subsets
subsets <- regsubsets(y ~ ., data=Boston[-coln],
method='exhaustive', nbest=4)
case <- summary(subsets)$outmat; case
rown <- rownames(case); rown
num1 <- str_sub(rown, 1, 1); num1
num2 <- str_sub(rown, 6, 6); num2
choice <- case[rown[num1 == max(num1) & num2 == 1], ] == "*"; choice
df_c <- as.data.frame(choice); df_c
df_c <- subset(df_c, df_c$choice == T)
row_df_c <- rownames(df_c); row_df_c
tmp <- paste("medv", "~", sep="")
for (i in 1:length(row_df_c)) {
ifelse(i < length(row_df_c), tmp <- paste(tmp, row_df_c[i], "+", sep=""), tmp <- paste(tmp, row_df_c[i], sep=""))
}
tmp
head(Boston)
head(Boston[-14])
re <- lm(formula = tmp, data=Boston)
summary(re)
Autolm <- function(data, dvar) {
coln <- length(colnames(data) == dvar)
y <- data[, coln]
subsets <- regsubsets(y ~ ., data = data[-coln],
method='seqrep', nbest=4)
subsets <- regsubsets(y ~ ., data = data[-coln],
method='exhaustive', nbest=4)
case <- summary(subsets)$outmat
rown <- rownames(case)
num1 <- str_sub(rown, 1, 1)
num2 <- str_sub(rown, 6, 6)
choice <- case[rown[num1 == max(num1) & num2 == 1], ] == "*"
df_c <- as.data.frame(choice)
df_c <- subset(df_c, df_c$choice == T)
row_df_c <- rownames(df_c)
form <- paste(dvar, "~")
for (i in 1:length(row_df_c)) {
ifelse(i < length(row_df_c), form <- paste(form, row_df_c[i], "+"), form <- paste(form, row_df_c[i]))
}
result <- lm(formula = form, data = data)
return(summary(result))
}
Autolm(Boston, "medv")
Autolm <- function(data, dvar) {
coln <- length(colnames(data) == dvar)
y <- data[, coln]
subsets <- regsubsets(y ~ ., data = data[-coln],
method='seqrep', nbest=4)
subsets <- regsubsets(y ~ ., data = data[-coln],
method='exhaustive', nbest=4)
case <- summary(subsets)$outmat
rown <- rownames(case)
num1 <- str_sub(rown, 1, 1)
num2 <- str_sub(rown, 6, 6)
choice <- case[rown[num1 == max(num1) & num2 == 1], ] == "*"
df_c <- as.data.frame(choice)
df_c <- subset(df_c, df_c$choice == T)
row_df_c <- rownames(df_c)
form <- paste(dvar, "~")
for (i in 1:length(row_df_c)) {
ifelse(i < length(row_df_c), form <- paste(form, row_df_c[i], "+"), form <- paste(form, row_df_c[i]))
}
result <- lm(formula = form, data = data)
return(summary(result))
}
Autolm(Boston, "medv")
names(Boston)
Autolm(Boston, "crim")
Autolm(Boston, "crim")
Autolm(Boston, "medv")
plot(Autolm(Boston, "medv"))
form <- paste(dvar, "~")
for (i in 1:length(row_df_c)) {
ifelse(i < length(row_df_c), form <- paste(form, row_df_c[i], "+"), form <- paste(form, row_df_c[i]))
}
plot(re)
par(mfrow=c(2,2))
plot(re)
# 다중회귀모형 적합 함수
Autolm <- function(data, dvar) {
coln <- length(colnames(data) == dvar)
y <- data[, coln]
subsets <- regsubsets(y ~ ., data = data[-coln],
method='seqrep', nbest=4)
subsets <- regsubsets(y ~ ., data = data[-coln],
method='exhaustive', nbest=4)
case <- summary(subsets)$outmat
rown <- rownames(case)
num1 <- str_sub(rown, 1, 1)
num2 <- str_sub(rown, 6, 6)
choice <- case[rown[num1 == max(num1) & num2 == 1], ] == "*"
df_c <- as.data.frame(choice)
df_c <- subset(df_c, df_c$choice == T)
row_df_c <- rownames(df_c)
form <- paste(dvar, "~")
for (i in 1:length(row_df_c)) {
ifelse(i < length(row_df_c), form <- paste(form, row_df_c[i], "+"), form <- paste(form, row_df_c[i]))
}
result1 <- lm(formula = form, data = data)
result2 <- summary(result1)
return(c(result1, result2))
}
Autolm(Boston, "crim")
re
re <- lm(formula = tmp, data=Boston)
re
summary(re)
Autolm(Boston, "crim")
result <- lm(formula = form, data = data)
# 다중회귀모형 적합 함수
Autolm <- function(data, dvar) {
coln <- length(colnames(data) == dvar)
y <- data[, coln]
subsets <- regsubsets(y ~ ., data = data[-coln],
method='seqrep', nbest=4)
subsets <- regsubsets(y ~ ., data = data[-coln],
method='exhaustive', nbest=4)
case <- summary(subsets)$outmat
rown <- rownames(case)
num1 <- str_sub(rown, 1, 1)
num2 <- str_sub(rown, 6, 6)
choice <- case[rown[num1 == max(num1) & num2 == 1], ] == "*"
df_c <- as.data.frame(choice)
df_c <- subset(df_c, df_c$choice == T)
row_df_c <- rownames(df_c)
form <- paste(dvar, "~")
for (i in 1:length(row_df_c)) {
ifelse(i < length(row_df_c), form <- paste(form, row_df_c[i], "+"), form <- paste(form, row_df_c[i]))
}
result <- lm(formula = form, data = data)
return(result)
}
Autolm(Boston, "crim")
a <- Autolm(Boston, "crim")
summary(a)
plot(a)
Boston
a <- Autolm(Boston, "medv")
a
a
summary(a)
plot(a)
head(Boston)
a <- Autolm(Boston, "medv")
a
summary(a)
plot(a) # 정규성, 독립성, 등분산성,
Boston
a <- Autolm(Boston, "medv")
(Boston, "medv")
Boston
a <- Autolm(Boston, "medv")
a
summary(a)
Boston
head(Boston)
model_B <- Autolm(Boston, "medv")
model_B
summary(model_B)
plot(model_B)
# 다중회귀모형 적합 함수
auto_lm <- function(data, dvar) {
coln <- length(colnames(data) == dvar)
y <- data[, coln]
subsets <- regsubsets(y ~ ., data = data[-coln],
method='seqrep', nbest=4)
subsets <- regsubsets(y ~ ., data = data[-coln],
method='exhaustive', nbest=4)
case <- summary(subsets)$outmat
rown <- rownames(case)
num1 <- str_sub(rown, 1, 1)
num2 <- str_sub(rown, 6, 6)
choice <- case[rown[num1 == max(num1) & num2 == 1], ] == "*"
df_c <- as.data.frame(choice)
df_c <- subset(df_c, df_c$choice == T)
row_df_c <- rownames(df_c)
form <- paste(dvar, "~")
for (i in 1:length(row_df_c)) {
ifelse(i < length(row_df_c), form <- paste(form, row_df_c[i], "+"), form <- paste(form, row_df_c[i]))
}
result <- lm(formula = form, data = data)
return(result)
}
Boston
head(Boston)
model_B <- autolm(Boston, "medv")
model_B
summary(model_B)
plot(model_B)
