mutate(arr = sort(d[,2]))
df
df <- d %>%
levels(mutate(arr = sort(d[,2])))
df <- d %>%
mutate(arr = levels(sort(d[,2])))
df
sort(df$X3)
sort(df$X1)
levels(df$X2)
df
levels(df$X2)[1]
levels(df$X2)[2]
levels(df$X2)[3]
levels(df$X1)[3]
levels(df$X1)
levels(df$X1)[1]
levels(df$X1)[2]
tmp <- data.frame(matrix(unlist(strsplit(s, "")), nrow=3, byrow=T))
tmp <- tmp %>%
mutate(arr = sort[,n])
df
df <- d %>%
mutate(arr = sort(d[,2]))
df
levels(df$X1)[2]
s
length(s)
t<- ""
for(i in 1:length(s)) {
t <- append(t, levels(df$arr)[i])
}
t
t <- c()
for(i in 1:length(s)) {
t <- append(t, levels(df$arr)[i])
}
t
for(i in 1:length(s)) {
t <- append(t, subset(df, levels(df$arr)[i]))
}
for(i in 1:length(s)) {
t <- append(t, subset(df, levels(df$arr) == i))
}
t
t
t <- c()
for(i in 1:length(s)) {
t <- append(t, subset(df[i,-4], levels(df$arr) == i))
}
t
df
levels(df$arr)
levels(df$arr)[1]
levels(df$arr)[2]
subset(df, levels(df$arr) == 1)
subset(df, levles(df$arr) == levels(df$arr)[1])
subset(df, levels(df$arr) == levels(df$arr)[1])
subset(df[,-4], levels(df$arr) == levels(df$arr)[1])
for(i in 1:length(s)) {
t <- append(t, subset(df[,-4], levels(df$arr) == levels(df$arr)[i]))
}
t
t <- c()
for(i in 1:length(s)) {
t <- append(t, subset(df[,-4], levels(df$arr) == levels(df$arr)[i]))
}
t
df
subset(df[,-4], levels(df$arr) == levels(df$arr)[1])
t <- c()
for(i in 1:nrow(df)) {
t <- append(t, subset(df[,-4], levels(df$arr) == levels(df$arr)[i]))
}
t
levels(df$arr)
levels(df$arr)[3]
levels(df$arr)[2]
levels(df$arr)[1]
nrow9df
nrow(df)
for(i in 1:nrow(df)) {
t <- rbind(t, subset(df[,-4], levels(df$arr) == levels(df$arr)[i]))
}
t <- c()
for(i in 1:nrow(df)) {
t <- rbind(t, subset(df[,-4], levels(df$arr) == levels(df$arr)[i]))
}
t
s <- c("sun", "bed", "car")
a <- strsplit(s, "")
b <- unlist(a)
b
a
matrix(a, nrow=3, byrow=T)
d <- data.frame(c)
df <- d %>%
mutate(arr = sort(d[,2]))
df
s <- c("sun", "bed", "car")
a <- strsplit(s, "")
b <- unlist(a)
b
c <- matrix(b, nrow=3, byrow=T)
c
d <- data.frame(c)
d
df <- d %>%
mutate(arr = sort(d[,2]))
df
t <- c()
for(i in 1:nrow(df)) {
t <- rbind(t, subset(df[,-4], levels(df$arr) == levels(df$arr)[i]))
}
t
d[,2]
d[,2]
t
t <- c()
for(i in 1:nrow(df)) {
t <- rbind(t, subset(df[,-4], levels(df[,2]) == levels(df[,2])[i]))
}
t
levels(df[,2])[2]
levels(df[,2])[1]
levels(df[,2])[3]
t <- c()
for(i in 1:nrow(df)) {
t <- rbind(t, subset(df[,-4], levels(df[,2]) == levels(df[,2])[i]))
}
t
subset(df[,-4], levels(df[,2]) == levels(df[,2])[1])
levels(df$arr)[1]
subset(df[,-4], levels(df[,2]) == levels(df[,2])[1])
levels(df[,2])[1]
subset(df[,-4], levels(df[,2]) == levels(df[,2])[1])
levels(df[,2])[1]
subset(df[,-4], levels(df[,2]) == levels(df[,2])[1])
subset(df[,-4], levels(df[,2]) == levels(df[,2])[2])
levels(df[,2])[2]
subset(df[,-4], levels(df[,2]) == levels(df[,2])[3])
levels(df[,2])[3]
levels(df[,2])
levels(df[,2]) == "a"
subset(df[,-4], df[,2] == levels(df[,2])[3])
t <- c()
for(i in 1:nrow(df)) {
t <- rbind(t, subset(df[,-4], df[,2] == levels(df[,2])[i]))
}
t
length(s)
as.vector(t)
as.matrix(t)
u<-as.matrix(t)
as.vector(u)
as.vector(u, byrow=t)
as.vector(u, byrow=T)
u<-as.matrix(t)
t <- c()
for(i in 1:nrow(df)) {
t <- rbind(t, subset(df[,-4], df[,2] == levels(df[,2])[i]))
print(t[i,])
}
for(i in 1:nrow(df)) {
t <- rbind(t, subset(df[,-4], df[,2] == levels(df[,2])[i]))
print(as.vector(t[i,]))
}
t
t <- c()
for(i in 1:nrow(df)) {
t <- rbind(t, subset(df[,-4], df[,2] == levels(df[,2])[i]))
print(as.vector(t[i,]))
}
t
for(i in 1:nrow(df)) {
t <- rbind(t, subset(df[,-4], df[,2] == levels(df[,2])[i]))
print(as.vector(as.matrix(t[i,])))
}
t <- c()
for(i in 1:nrow(df)) {
t <- rbind(t, subset(df[,-4], df[,2] == levels(df[,2])[i]))
print(as.vector(as.matrix(t[i,])))
}
t
t[1,]
length(t[1,])
q <- c()
t[1,]
for(k in 1:length(t[1,])) {
q <- paste(q, t[1,k], sep="")
}
q
for(i in 1:nrow(df)) {
t <- rbind(t, subset(df[,-4], df[,2] == levels(df[,2])[i]))
print(as.vector(as.matrix(t[i,])))
}
t
t <- c()
for(i in 1:nrow(df)) {
t <- rbind(t, subset(df[,-4], df[,2] == levels(df[,2])[i]))
print(as.vector(as.matrix(t[i,])))
}
t
q<-c()
t <- c()
q <- c()
for(i in 1:nrow(df)) {
t <- rbind(t, subset(df[,-4], df[,2] == levels(df[,2])[i]))
for(k in 1:length(t[i,])) {
q <- rbind(paste(q, t[i,k], sep=""))
}
}
q
q <- c()
for(k in 1:length(t[1,])) {
q <- paste(q, t[1,k], sep="")
}
q
q <- c()
for(k in 1:length(t[1,])) {
q <- rbind(paste(q, t[1,k], sep=""))
}
q
q
t <- c()
q <- c()
for(i in 1:nrow(df)) {
t <- rbind(t, subset(df[,-4], df[,2] == levels(df[,2])[i]))
for(k in 1:length(t[i,])) {
q <- rbind(paste(q, t[i,k], sep=""))
}
}
q
t <- c()
q <- c()
for(i in 1:nrow(df)) {
t <- rbind(t, subset(df[,-4], df[,2] == levels(df[,2])[i]))
for(k in 1:length(t[i,])) {
q <- paste(q, t[i,k], sep="")
}
q <- paste(q, " ")
}
q
t <- c()
q <- c()
for(i in 1:nrow(df)) {
t <- rbind(t, subset(df[,-4], df[,2] == levels(df[,2])[i]))
for(k in 1:length(t[i,])) {
q <- paste(q, t[i,k], sep="")
}
q <- paste(q, ", ")
}
q
t <- c()
q <- c()
for(i in 1:nrow(df)) {
t <- rbind(t, subset(df[,-4], df[,2] == levels(df[,2])[i]))
for(k in 1:length(t[i,])) {
q <- paste(q, t[i,k], sep="")
}
q <- paste(q, " ")
}
q
t <- c()
q <- c()
for(i in 1:nrow(df)) {
t <- rbind(t, subset(df[,-4], df[,2] == levels(df[,2])[i]))
for(k in 1:length(t[i,])) {
q <- paste(q, t[i,k], sep="")
}
q <- paste(q, "")
}
q
n <- c()
for(i in 1:nrow(df)) {
t <- rbind(t, subset(df[,-4], df[,2] == levels(df[,2])[i]))
for(k in 1:length(t[i,])) {
q <- paste(q, t[i,k], sep="")
}
n <- append(n, q)
}
q
n
t <- c()
q <- c()
n <- c()
for(i in 1:nrow(df)) {
t <- rbind(t, subset(df[,-4], df[,2] == levels(df[,2])[i]))
for(k in 1:length(t[i,])) {
q <- paste(q, t[i,k], sep="")
}
}
q
t <- c()
q <- c()
n <- c()
for(i in 1:nrow(df)) {
t <- rbind(t, subset(df[,-4], df[,2] == levels(df[,2])[i]))
for(k in 1:length(t[i,])) {
q <- paste(q, t[i,k], sep="")
}
n <- append(n, q)
}
q
n
oddSum <- function(num) {
sum <- 1
for(i in 2:num) {
if(i %% 2 == 1) {
sum <- sum + i
}
}
return(sum)
}
oddsum(1)
oddSum <- function(num) {
sum <- 1
for(i in 2:num) {
if(i %% 2 == 1) {
sum <- sum + i
}
}
return(sum)
}
oddSum(1)
oddSum(1)
oddSum <- function(num) {
sum <- 0
for(i in 1:num) {
if(i %% 2 == 1) {
sum <- sum + i
}
}
return(sum)
}
oddSum(1)
oddSum(3)
oddSum(100)
t <- c()
q <- c()
n <- c()
for(i in 1:nrow(df)) {
t <- rbind(t, subset(df[,-4], df[,2] == levels(df[,2])[i]))
for(k in 1:length(t[i,])) {
q <- paste(q, t[i,k], sep="")
}
n <- c(n, q)
}
q
n
q
for(i in 1:nrow(df)) {
t <- rbind(t, subset(df[,-4], df[,2] == levels(df[,2])[i]))
for(k in 1:length(t[i,])) {
q <- paste(q, t[i,k], sep="")
}
n <- c(n, q)
q <- c()
}
q
n
for(i in 1:nrow(df)) {
t <- rbind(t, subset(df[,-4], df[,2] == levels(df[,2])[i]))
for(k in 1:length(t[i,])) {
q <- paste(q, t[i,k], sep="")
n <- c(n, q)
}
q<-c()
}
q
n
t <- c()
q <- c()
n <- c()
for(i in 1:nrow(df)) {
t <- rbind(t, subset(df[,-4], df[,2] == levels(df[,2])[i]))
q <- c()
for(k in 1:length(t[i,])) {
q <- paste(q, t[i,k], sep="")
}
n <- c(n, q)
}
q
n
t <- c()
q <- c()
n <- c()
for(i in 1:nrow(df)) {
t <- rbind(t, subset(df[,-4], df[,2] == levels(df[,2])[i]))
for(k in 1:length(t[i,])) {
q <- paste(q, t[i,k], sep="")
}
n <- c(n, q)
q <- c()
}
q
n
t <- c()
n <- c()
for(i in 1:nrow(df)) {
t <- rbind(t, subset(df[,-4], df[,2] == levels(df[,2])[i]))
q <- c()
for(k in 1:length(t[i,])) {
q <- paste(q, t[i,k], sep="")
}
n <- c(n, q)
}
q
n
strange_sort <- function(s, n) {
tmp <- data.frame(matrix(unlist(strsplit(s, "")), nrow=length(s), byrow=T))
tmp <- tmp %>% mutate(arr = sort[,n])
tmp2 <- c()
result <- c()
for(i in 1:nrow(tmp)) {
tmp2 <- rbind(tmp2, subset(tmp[,-4], tmp[,2] == levels(tmp[,2])[i]))
char <- c()
for(k in 1:length(tmp2[i,])) {
char <- paste(char, tmp2[i,k], sep="")
}
result <- append(result, char)
}
return(result)
}
strings <- c("sun", "bed", "car")
strange_sort(strins, 2)
strange_sort(strings, 2)
t <- c()
for(i in 1:nrow(df)) {
t <- rbind(t, subset(df[,-4], df[,2] == levels(df[,2])[i]))
q <- c()
for(k in 1:length(t[i,])) {
q <- paste(q, t[i,k], sep="")
}
n <- c(n, q)
}
n
strange_sort <- function(strings, n) {
tmp <- data.frame(matrix(unlist(strsplit(strings, "")), nrow=length(strings), byrow=T))
tmp <- tmp %>% mutate(arr = sort[,n])
tmp2 <- c()
result <- c()
for(i in 1:nrow(tmp)) {
tmp2 <- rbind(tmp2, subset(tmp[,-4], tmp[,n] == levels(tmp[,n])[i]))
char <- c()
for(k in 1:length(tmp2[i,])) {
char <- paste(char, tmp2[i,k], sep="")
}
result <- append(result, char)
}
return(result)
}
strange_sort(strings, 2)
strings <- c("sun", "bed", "car")
strange_sort(strings, 2)
strange_sort(strings, 2)
strange_sort <- function(strings, n) {
tmp <- data.frame(matrix(unlist(strsplit(strings, "")), nrow=length(strings), byrow=T))
tmp <- tmp %>% mutate(arr = sort(tmp[,n]))
tmp2 <- c()
result <- c()
for(i in 1:nrow(tmp)) {
tmp2 <- rbind(tmp2, subset(tmp[,-4], tmp[,n] == levels(tmp[,n])[i]))
char <- c()
for(k in 1:length(tmp2[i,])) {
char <- paste(char, tmp2[i,k], sep="")
}
result <- append(result, char)
}
return(result)
}
strange_sort(strings, 2)
strings <- c("sun", "bed", "car")
strange_sort(strings, 2)
quit()
quit
quit
quit(save="default")
fit3
fit3
# 3. mtcars 데이터셋에서 배기량(disp)에 따른 마력(hp)의 회귀식을 구하시오.
fit3 <- lm(mtcars$hp ~ mtcars$disp, data=mtcars)
fit3
print(paste("배기량(disp)에 따른 마력(hp)의 회귀식은",
"[ 마력(hp) = ", format(fit2$coefficients[2], digits=4), "* 배기량(disp) +",
format(fit2$coefficients[1], digits=4), "] 이다."))
print(paste("배기량(disp)에 따른 마력(hp)의 회귀식은",
"[ 마력(hp) = ", format(fit3$coefficients[2], digits=4), "* 배기량(disp) +",
format(fit3$coefficients[1], digits=4), "] 이다."))
# 2. 소득이 높을수록 신용카드 사용량이 많아진다고 하는데, 월 소득 대비 신용카드 사용량을
# 조사하였더니 아래와 같이 나왔다고 한다. 이 자료를 바탕으로 해서 회귀식을 구하고,
# 월 소득이 250만원일 때 신용카드 사용량을 예측하시오. (단위: 만원)
# 월 소득(x):	100  200  300  400  500
# 카드 사용량(y):	 30    70    85  140  197
x <- c(100, 200, 300, 400, 500)
y <- c(30, 70, 85, 140, 197)
xy <- data.frame(월소득 = x, 카드사용량= y)
fit2 <- lm(카드사용량 ~ 월소득, data=xy)
print(paste("회귀분석 결과 상수항과 회귀계수는 각각 (", format(fit2$coefficients[1], digits=4),
",", format(fit2$coefficients[2], digits=4), ") 이므로 월 소득이 250만원일 때 신용카드 사용량은",
250*fit2$coefficients[2]+fit2$coefficients[1], "이다."))
print(paste("배기량(disp)에 따른 마력(hp)의 회귀식은",
"[ 마력(hp) = ", format(fit3$coefficients[2], digits=4), "* 배기량(disp) +",
format(fit3$coefficients[1], digits=4), "] 이다."))
fit3
# 3D Pie Chart 출력
# plotrix 패키치 필요
install.packages("plotrix")
library(plotrix)
th_pct <- round(bchart/sum(bchart)*100, 1)
th_names <- names(bchart)
th_labels <- paste(th_names, "\n", "(", th_pct, ")")
